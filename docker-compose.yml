version: "3.8"

services:
  # Main CORS Proxy Service
  cors-proxy:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: open-cors-proxy
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - PROXY_API_KEY=${PROXY_API_KEY:-}
      - ADMIN_API_KEY=${ADMIN_API_KEY:-}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-1000}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30000}
      - MAX_BODY_SIZE=${MAX_BODY_SIZE:-10mb}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
      - BLOCKED_DOMAINS=${BLOCKED_DOMAINS:-}
      - DEBUG_HEADERS=${DEBUG_HEADERS:-false}
      - DEBUG_ERRORS=${DEBUG_ERRORS:-false}
      - INCLUDE_CONFIG=${INCLUDE_CONFIG:-false}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cors-proxy-network
    volumes:
      - ./logs:/app/logs:rw
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cors-proxy.rule=Host(`localhost`)"
      - "traefik.http.services.cors-proxy.loadbalancer.server.port=4000"

  # Development Service (optional)
  cors-proxy-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: open-cors-proxy-dev
    ports:
      - "4001:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DEBUG_HEADERS=true
      - DEBUG_ERRORS=true
      - INCLUDE_CONFIG=true
    volumes:
      - .:/app:cached
      - /app/node_modules
    restart: unless-stopped
    networks:
      - cors-proxy-network
    profiles:
      - dev

  # Redis for caching (optional enhancement)
  redis:
    image: redis:7-alpine
    container_name: cors-proxy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - cors-proxy-network
    profiles:
      - cache
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-corsproxyredis}

  # Nginx Load Balancer (for multiple instances)
  nginx:
    image: nginx:alpine
    container_name: cors-proxy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - cors-proxy
    restart: unless-stopped
    networks:
      - cors-proxy-network
    profiles:
      - loadbalancer

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: cors-proxy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - cors-proxy-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cors-proxy-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - cors-proxy-network
    profiles:
      - monitoring

networks:
  cors-proxy-network:
    driver: bridge
    name: cors-proxy-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
# Example usage:
#
# Production:
# docker-compose up -d cors-proxy
#
# Development:
# docker-compose --profile dev up cors-proxy-dev
#
# With caching:
# docker-compose --profile cache up -d cors-proxy redis
#
# With load balancer:
# docker-compose --profile loadbalancer up -d
#
# Full monitoring stack:
# docker-compose --profile monitoring up -d
#
# Everything:
# docker-compose --profile dev --profile cache --profile loadbalancer --profile monitoring up -d
